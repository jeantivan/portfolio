---
import type { Polymorphic, HTMLTag } from 'astro/types';

// Estilos
type Size = "large" | "medium" | "small";
type Variant = "text" | "outlined" | "filled";
type Color = "primary" | "secondary" | "default";

const buttonSizes: Record<Size, string> = {
  small: "p-1.5 w-6 h-6",
  medium: "p-2 w-9 h-9",
  large: "p-2.5 w-12 h-12"
};

const variantClassNames: Record<Variant, string> = {
  text: "bg-transparent border-transparent",
  outlined: "border border-background-6",
  filled:
    "border border-primary-9 bg-primary-9 hover:border-primary-10 hover:bg-primary-10 text-background-1"
};

const colorClassNames: Record<Color, string> = {
  default:
    "border-background-7 text-background-12 hover:bg-neutral-100/20 data-[state=open]:bg-neutral-100/5",
  primary:
    "border-primary-7 hover:border-primary-8 hover:bg-primary-4 active:bg-primary-5 text-primary-9 data-[state=open]:bg-primary-5",
  secondary:
    "border-background-7 hover:border-background-8 hover:bg-background-4 active:bg-background-5 text-background-9 data-[state=open]:bg-background-5"
};

type ValidTag = "a" | "button";

type Props<Tag extends HTMLTag = "button"> = Polymorphic<
  {as: Tag & ValidTag }> & {
  size?: Size;
  variant?: Variant;
  class?: string;
  color?: Color,
  label: string;
}

const { 
  as: Tag = "button", 
  size = "medium",
  variant = "outlined",
  color = "default",
  class: className,
  label,
  ...rest
} = Astro.props

const classNames = [
 "inline-flex justify-center align-center outline-none",
 "transition duration-75 rounded-lg",
  buttonSizes[size],
  variantClassNames[variant],
  colorClassNames[color],
  className
]
   
---
<Tag class:list={classNames} {...rest}>
  <slot />
</Tag>
